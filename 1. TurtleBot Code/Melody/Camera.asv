classdef Camera < matlab.mixin.SetGet

    properties %(SetAccess=protected) % Not able to work with "private"
        f % focal length
        p % principal point
        resolution % image size [x,y]
        fov % horizontal, vertical field of view
        featureCentre % centre of feature
        featureCorners % current observed corners of feature
        featureDistance % current distance to the feature
        targetCorners % target corners of feature for visual servoing
        targetDistance % target distance for visual servoing
        rgbImgSub % rgb Image Subscriber 
        rgbImg % rgb Image
        cmdVelPub % cmdVel Publisher
        velM % velocity matrix from visual servoing
        
        mode % Search (1), Follow (2), End (0)
        followModeThreshold % Threshold for accuracy
    end

    methods

        % ----------- %
        % Constructor %
        % ----------- %

        function camera = Camera()
        end

        % -------------------------- %
        % Image Processing Functions %
        % -------------------------- %

        function updateRGBImg(camera)
            var = readImage(receive(camera.rgbImgSub,5));
            set(camera, "rgbImg", var);
        end

        function updateFeatureCentreCorners(camera)
            [centre, corners] = fastCentreCornersDetection(get(camera, "rgbImg"));
            if isnan(centre) == true
                set(camera, "featureCentre", nan);
                set(camera, "featureCorners", nan);
            end
            if isnan(centre) == false
                set(camera, "featureCentre", centre);
                set(camera, "featureCorners", corners);
            end
        end

        function interpolateDistance(camera)
            var = 
            set(camera,"featureDistance", var);
        end

    end

    methods (Access = private)

        function [centre,corners] = fastCentreCornersDetection(rgbImg)
                %% Feature Centre Corners Detection Using Harris Corners or FAST
        % FAST is to be used when the leader Turtlebot is < 1.3m away
        % Harris corners is to be used when the Leader Turtlebot is > 1.3m away
        % Centre = x,y
        % Corners = x,y
        % This function sees blue and converts the image to greyscale with respect to blue
        
        % Breaking rgbImg into colour components
        r1 = rgbImg(:,:,1);
        g1 = rgbImg(:,:,2);
        b1 = rgbImg(:,:,3);
        
        justBlue = b1 - r1/2 - g1/2; 
        bw = justBlue > 5; % Threshold that turns the image to a binary image
        
        % tempCorners = detectHarrisFeatures(bw);
        tempCorners = detectSURFFeatures(bw); % Detected no corners for bw
        
        % Get corners
        corners = [min(tempCorners.Location(:,1)) min(tempCorners.Location(:,2));
                      min(tempCorners.Location(:,1)) max(tempCorners.Location(:,2)); ...
                      max(tempCorners.Location(:,1)) min(tempCorners.Location(:,2)); ...
                      max(tempCorners.Location(:,1)) max(tempCorners.Location(:,2))];   
        
        centre = [mean(corners(:,1)) mean(corners(:,2))];
        end
        function d = interpolateDistance(get(camera,"featureCorners"))
        % Target at further distance
        % d1 = distance
        % L1 = edgeLength
        
        % Taget at closer distance
        % d2 = distance
        % L2 = edgeLength
        
        % Load targets
        load("RealTargetCorners.mat", 'targets');
        %load("SimulatedTargetCorners.mat", 'targets');
        
        % Compute bottom edge length
        L = corners(2,2) - corners(1,2);
        
        % Compare bottom edge length with available bottom edge lengths and note
        % the index (distance
        
        for k = 5:5:90
            if L > targets(k,5)
                break
            end
        end
        
        d1 = targets(k,3);
        L1 = targets(k,5);
        d2 = targets(k-5,3);
        L2 = targets(k-5,5);
        
        % Interpolate
        
        d = d1 + (L-L1) * (d2-d1) / (L2 - L1);
        
        end
    end
end